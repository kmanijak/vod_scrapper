import jsdom from 'jsdom';
import { trim } from 'lodash';

// ---JSDOM---
/**
 * Create document object based on rawHtml
 * @param {string} rawHtml
 * @returns {Object}
 */
const getDocument = rawHtml => jsdom.jsdom(rawHtml);

/**
 * Closing window generated by jsdom. Needs to free memory
 * @param {Object} document
 */
const closeWindow = document => {
  const window = document.document.defaultView;
  window.close();
};

/**
 * Util to handle creation of document, parsing and then closing window
 * @param {string} rawHtml
 * @param {function} parser
 * @returns {*}
 */
export const transformHtml = (rawHtml, parser) => {
  const document = getDocument(rawHtml);
  const parsedData = parser(document);
  closeWindow(document);
  return parsedData;
};



// ---DOM---
/**
 * Clear value from new lines chars
 * @param {string} text
 */
export const getValue = text => trim(text.replace(/\\n/g));

/**
 * Get inner HTML value from element if exists. If not, return empty string
 * @param {Object} element
 * @return {string}
 */
export const getInnerHtmlOptionalValue = element => element ? getValue(element.innerHTML) : '';

/**
 * Create array from values listed as string
 * @param {Object} element
 * @param {string} querySelector
 * @param {string} splitChar
 * @returns {Array<string>}
 */
export const getSplitValues = (element, querySelector, splitChar) => {
  const value = element.querySelector(querySelector);

  return value ?
    value.innerHTML.split(splitChar).map((text) => getValue(text)) :
    [];
};

/**
 * Get value from element by query selector
 * @param {Object} element
 * @param {string} querySelector
 * @returns {string}
 */
export const getValueByQuerySelector = (element, querySelector) => {
  const subElement = element.querySelector(querySelector);
  return getInnerHtmlOptionalValue(subElement);
};
